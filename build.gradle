plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	alias libs.plugins.minotaur
}

base {
	archivesName = project.archives_base_name
}

version = "$project.version"
group = project.maven_group

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}

	from('LICENSE-ASSETS.md') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "planetarium"
	uploadFile = remapJar
	additionalFiles = [sourcesJar]
	gameVersions = ["1.19.3", "1.19.4", "1.20", "1.20.1", "1.20.2", "1.20.4"]
	loaders = ["quilt"]
	def ref = System.getenv("GITHUB_REF")
	changelog = System.getenv("CHANGELOG") ?:
		(ref != null && ref.startsWith("refs/tags/")) ?
			"You may view the changelog at https://github.com/woodiertexas/planetarium/releases/tag/${URLEncoder.encode(ref.substring(10), StandardCharsets.UTF_8)}" :
			"No changelog is available. Perhaps poke at https://github.com/woodiertexas/planetarium for a changelog?"
}
